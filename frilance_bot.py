import argparse
import logging
import datetime
import os
import random
import requests
from enum import Enum, auto
from textwrap import dedent
from telegram import ParseMode
from more_itertools import chunked
from itertools import cycle
from payment import send_payment_link
import environs
from telegram import ReplyKeyboardMarkup
from telegram.ext import (CommandHandler, ConversationHandler, Filters,
                          MessageHandler, Updater)


logger = logging.getLogger(__name__)


class States(Enum):
    START = auto()
    ADMIN = auto()
    PRICE = auto()
    ORDERS = auto()
    RATE_CHOI–°E = auto()
    PAYMENT = auto()
    ORDER_NAME = auto()
    ORDER_DESCRIPTION = auto()
    ORDER_FILES = auto()
    VERIFICATE = auto()
    FRILANCER = auto()
    FRILANCER_ORDERS = auto()
    ORDERS_PAGINATOR = auto()


class BotData:
    ADMIN_CHAT_ID = 704859099


def call_api_get(endpoint):
    url = f"http://127.0.0.1:8000/{endpoint}"
    response = requests.get(url)
    response.raise_for_status()
    return response.json()


def call_api_post(endpoint, payload):
    url = f"http://127.0.0.1:8000/{endpoint}"
    response = requests.post(url, data=payload)
    response.raise_for_status()
    return response.json()


def start(update, context):
    user = update.effective_user
    greetings = dedent(fr'''
                            –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {user.mention_markdown_v2()}\!
                            –Ø –±–æ—Ç —Å–µ—Ä–≤–∏—Å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è PHP
                            –£–∫–∞–∂–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å\.''')

    message_keyboard = [["–ö–ª–∏–µ–Ω—Ç üòä", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ü•∑"],
                        ['–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úçÔ∏è']]

    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_markdown_v2(text=greetings,
                                     reply_markup=markup)
    return States.START


def message_to_admin(update, context):
    update.message.reply_text(text='–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
    return States.ADMIN


def send_to_admin(update, context):
    telegram_id = update.message.from_user.id
    message = update.message.text
    menu_msg = dedent(f"""\
                <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</b>

                <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
                {message}
                """).replace("    ", "")
    update.message.reply_text(
        text=menu_msg,
        parse_mode=ParseMode.HTML
    )
    update.message.chat.id = BotData.ADMIN_CHAT_ID
    menu_msg = dedent(f"""\
                —ç—Ç–æ –≤–∏–¥–∏—Ç —Ñ–ª–æ—Ä–∏—Å—Ç
                <b>–ò–î –∫–ª–∏–µ–Ω—Ç–∞:</b>
                {telegram_id}
                <b>–ó–∞–ø—Ä–æ—Å:</b>
                {message}
                """).replace("    ", "")
    update.message.reply_text(
        text=menu_msg,
        parse_mode=ParseMode.HTML
    )
    return

def check_client(update, context):
    given_callback = update.callback_query
    if given_callback:
        telegram_id = context.user_data["telegram_id"]
        given_callback.answer()
        given_callback.delete_message()
    else:
        telegram_id = update.message.from_user.id
        context.user_data["telegram_id"] = telegram_id

    url = f"http://127.0.0.1:8000/api/clients/{telegram_id}"
    response = requests.get(url)

    if response.ok:
        rest_days = response.json()['days_left']
        rest_orders = response.json()['requests_left']
        rate_name = response.json()['tariff_title']
        user_fullname = str(update.message.from_user['first_name']) + ' ' + str(
            update.message.from_user['last_name'])
        greetings = dedent(f'''
                        {user_fullname} –≤–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É —Ç–∞—Ä–∏—Ñ—É:
                        –í–∞—à —Ç–∞—Ä–∏—Ñ "{rate_name}"
                        –¢–∞—Ä–∏—Ñ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {rest_days}
                        –í –≤–∞—à–µ–º —Ç–∞—Ä–∏—Ñ–µ –æ—Å—Ç–∞–ª–æ—Å—å {rest_orders} –∑–∞–ø—Ä–æ—Å–æ–≤.''')

        message_keyboard = [["–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"]]
        markup = ReplyKeyboardMarkup(
            message_keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )

        if given_callback:
            context.bot.reply_markdown_v2(
                text=greetings,
                chat_id=given_callback.message.chat.id,
                reply_markup=markup,
            )
            return States.ORDERS

        update.message.reply_text(text=greetings, reply_markup=markup)
        return States.ORDERS

    response = call_api_get('api/all_tariffs/')
    rates = response['tariffs']
    rates.extend(["–ù–∞–∑–∞–¥"])
    message_keyboard = list(chunked(rates, 2))

    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    with open('documents/–¢–∞—Ä–∏—Ñ—ã.pdf', 'rb') as image:
        price_pdf = image.read()

    greeting_msg = dedent("""\
        –ü—Ä–∏–≤–µ—Ç!‚úåÔ∏è

        –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º\
         –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ

        –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ.
        """).replace("  ", "")
    update.message.reply_document(
        price_pdf,
        filename="–¢–∞—Ä–∏—Ñ—ã.pdf",
        caption=greeting_msg,
        reply_markup=markup)

    return States.PRICE


def chooze_rate(update, context):
    context.user_data["rate"] = update.message.text
    url = f"http://127.0.0.1:8000/api/tariff/{update.message.text}"
    response = requests.get(url)
    response.raise_for_status()
    rate_name = response.json()['title']
    rate_description = response.json()['description']
    rate_quantity = response.json()['request_quantity']
    rate_price = response.json()['price']

    rate_message = dedent(f"""\
                        <b>–¢–∞—Ä–∏—Ñ</b>
                        {rate_name}
                        <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
                        {rate_description}
                        <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –≤ –º–µ—Å—è—Ü:</b>
                        {rate_quantity}
                        <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞:</b>
                        {rate_price}
                       """).replace("    ", "")

    message_keyboard = [
        ['–ù–∞–∑–∞–¥', '–í—ã–±—Ä–∞—Ç—å']
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(text=rate_message,
                              reply_markup=markup,
                              parse_mode=ParseMode.HTML)
    return States.RATE_CHOI–°E


def send_payment(update, context):
    message_keyboard = [
        ['–ù–∞–∑–∞–¥', '–û–ø–ª–∞—Ç–∏—Ç—å']
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    chat_id = '???'
    tariff = '???'
    # update.message.reply_text(text=send_payment_link(chat_id, tariff),
    #                           reply_markup=markup)
    return States.PAYMENT


def add_user(update, context):
    payload = {
        "chat_id": context.user_data["telegram_id"],
        "tariff": context.user_data["rate"],
        "payment_date": datetime.datetime.now()
    }
    response = call_api_post('api/clients/add/', payload=payload)
    update.message.reply_text(text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ /start')


def check_frilancer(update, context):
    chat_id = update.effective_message.chat_id
    print(chat_id)
    url = f"http://127.0.0.1:8000/api/freelancers/{chat_id}"
    response = requests.get(url)
    x = response.status_code
    if response.status_code == 404:
        message_keyboard = [
            ['–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é']
        ]
        markup = ReplyKeyboardMarkup(
            message_keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        update.message.reply_text(text='–ß—Ç–æ-–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã –≤–∞–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, '
                                       '–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"',
                                  reply_markup=markup)
        return States.VERIFICATE
    message_keyboard = [
        ['–í—ã–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑', '–ú–æ–∏ –∑–∞–∫–∞–∑—ã']
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(text='–í—ã–±–µ—Ä–µ—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                              reply_markup=markup)

    return States.FRILANCER


def verify_freelancer(update, context):
    chat_id = update.effective_message.chat_id
    endpoint = "api/freelancers/add"
    payload = {
        "chat_id": chat_id,
    }
    call_api_post(endpoint, payload)
    message_keyboard = [["–ö–ª–∏–µ–Ω—Ç", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"],
                        ['–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É']]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(text='–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã.',
                              reply_markup=markup)
    return States.START


def check(update, context):

    order_id = update.message.text.replace('/order_', '')
    endpoint = f'api/order/{order_id}'
    order = call_api_get(endpoint)
    message = f'–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ - {order["title"]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {order["description"]}'
    if order['freelancer'] is None:
        message_keyboard = [
            [f'–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É –∑–∞–∫–∞–∑ ‚Ññ{order_id}'],
            ['–ù–∞–∑–∞–¥']
        ]
        markup = ReplyKeyboardMarkup(
            message_keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        update.message.reply_text(text=message, reply_markup=markup)
        return States.FRILANCER_ORDERS
    else:
        message_keyboard = [
            [f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}'],
            ['–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞'],
            ['–ù–∞–∑–∞–¥']
        ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(text=message, reply_markup=markup)
    return States.ORDERS


def finish_orders(update, context):
    chat_id = update.effective_message.chat_id
    order_id = update.message.text.replace('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ', '')
    print(order_id)
    # endpoint = f'api/order/{order_id}'
    # order = call_api_get(endpoint)

    endpoint = f'api/order/finish'
    payload = {
        "order_id": order_id,
    }
    call_api_post(endpoint, payload)
    message_keyboard = [
        ['–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ', '–ù–∞–∑–∞–¥'],
        ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(text="–ó–∞–∫–∞–∑ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π", reply_markup=markup)
    return States.FRILANCER_ORDERS


def add_orders_to_frilancer(update, context):
    chat_id = update.effective_message.chat_id
    order_id = update.message.text.replace('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É –∑–∞–∫–∞–∑ ‚Ññ', '')
    print(order_id)
    endpoint = f'api/order/{order_id}'
    order = call_api_get(endpoint)

    endpoint = f'api/freelancers/appoint'
    payload = {
        "order_id": order_id,
        "chat_id": chat_id
    }
    call_api_post(endpoint, payload)
    message_keyboard = [
        ['–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ', '–ù–∞–∑–∞–¥'],
        ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(text="–ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É", reply_markup=markup)
    return States.FRILANCER_ORDERS


def send_new_order(update, context):
    message_keyboard = [
        ['–ù–∞–∑–∞–¥']
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(text='–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ –ª–µ–≥—á–µ –±—ã–ª–æ –∏—Å–∫–∞—Ç—å',
                              reply_markup=markup)
    return States.ORDER_NAME


def create_order_name(update, context):
    context.user_data['order_name'] = update.message.text
    message_keyboard = [
        ['–ù–∞–∑–∞–¥']
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(text='–û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –∑–∞–∫–∞–∑–∞',
                              reply_markup=markup)
    return States.ORDER_DESCRIPTION


def create_order_description(update, context):
    context.user_data['order_description'] = update.message.text
    message_keyboard = [
        ['–ù–∞–∑–∞–¥', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(text='–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ',
                              reply_markup=markup)
    return States.ORDER_FILES


def add_file_to_order(update, context):
    telegram_id = context.user_data["telegram_id"]
    if not os.path.exists(f'media/{telegram_id}'):
        os.mkdir(f'media/{telegram_id}')
    document_name = update.message.document.file_name
    document = update.message.document.get_file()
    document.download(f'media/{telegram_id}/{document_name}')

    message_keyboard = [
        ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    message = '–í—ã –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ —Ñ–∞–π–ª –∫ –∑–∞–∫–∞–∑—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã - –¥–æ–±–∞–≤–ª—è–π—Ç–µ, –ª–∏–±–æ' \
              '–Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞'
    update.message.reply_text(text=message,
                              reply_markup=markup)
    return States.ORDER_FILES


def create_order(update, context):
    order_name = context.user_data['order_name']
    order_description = context.user_data['order_description']
    telegram_id = context.user_data["telegram_id"]
    payload = {
        'title': order_name,
        'description': order_description,
        'chat_id': telegram_id,
    }
    call_api_post("api/order/add", payload)

    message_keyboard = [
        ['–ù–∞–∑–∞–¥']
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    message = dedent("""\
        –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∑–∞–∫–∞–∑. –û–∂–∏–¥–∞–π—Ç–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚úåÔ∏è

        –ê –ø–æ–∫–∞ —è –≤–∞–º —Å–ø–æ—é "–ª—è-–ª—è-–ª—è, –¥—É—Ö–∞—Å—Ç –º–∏—â—å"
        –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ø–µ—Å–Ω—è, –º–æ–∂–µ—Ç–µ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +79805677474.
        
        –ê –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥"
        """).replace("  ", "")
    update.message.reply_text(text=message,
                              reply_markup=markup)
    return States.ORDER_FILES


def show_orders(update, context):
    orders = call_api_get('api/all_orders')
    message_keyboard = [
        ['–ù–∞–∑–∞–¥']
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(text='–ú–æ–∏ –∑–∞–∫–∞–∑—ã', reply_markup=markup)
    return States.PRICE


def func_chunks_generators(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i : i + n]


five = ''
orders_by_five_elements = ''
count = 1
def show_five_orders(update, context):
    text = update.message.text
    global five
    global count
    # global orders_by_five_elements
    if five == '':
        five = call_api_get(f'api/order/find?page={count}')
    else:
        if text == '–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã':
            count += 1
            five = call_api_get(f'api/order/find?page={count}')
        elif text == '–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã':
            count -= 1
            five = call_api_get(f'api/order/find?page={count}')
    ps = [
        f'/order_{p["id"]}‚¨Ö–í–´–ë–†–ê–¢–¨ –ó–ê–ö–ê–ó. \n {p["title"]} \n\n' for count, p in enumerate(five['results'])]
    messages = ' '.join(ps)
    if not five['previous'] and not five['next']:
        message_keyboard = [
            ['–ù–∞–∑–∞–¥']
        ]
    elif five['previous'] and five['next']:
        message_keyboard = [
            ['–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã', '–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã'],
            ['–ù–∞–∑–∞–¥']
        ]
    elif five['previous'] and not five['next']:
        message_keyboard = [
            ['–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã'],
            ['–ù–∞–∑–∞–¥']
        ]
    elif not five['previous'] and five['next']:
        message_keyboard = [
            ['–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã'],
            ['–ù–∞–∑–∞–¥']
        ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(text=messages, reply_markup=markup)
    return States.ORDERS_PAGINATOR


def show_frilancer_orders(update, context):
    chat_id = update.effective_message.chat_id
    url = f'api/freelancers/{chat_id}/orders'
    orders = call_api_get(url)
    ps = [
        f'/order_{p["id"]}‚¨Ö–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ó–ê–ö–ê–ó. \n {p["title"]} \n\n' for count, p in enumerate(orders)]
    messages = ' '.join(ps)
    message_keyboard = [
        ['–ù–∞–∑–∞–¥', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(text=messages, reply_markup=markup)
    return States.FRILANCER_ORDERS


# def error(update, context):
#     logger.warning('Update "%s" caused error "%s"', update, error)
#     update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


if __name__ == '__main__':
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

    env = environs.Env()
    env.read_env()

    telegram_bot_token = env.str("TG_BOT_TOKEN")

    updater = Updater(telegram_bot_token, use_context=True)
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            States.START: [
                MessageHandler(Filters.text("–ö–ª–∏–µ–Ω—Ç üòä"), check_client),
                MessageHandler(Filters.text("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ü•∑"), check_frilancer),
                MessageHandler(Filters.text('–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úçÔ∏è'), message_to_admin),
            ],
            States.ADMIN: [
                MessageHandler(Filters.text, send_to_admin),
            ],
            States.VERIFICATE: [
                MessageHandler(Filters.text('–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é'), verify_freelancer),
                MessageHandler(Filters.text, start),
            ],
            States.FRILANCER: [
                MessageHandler(Filters.command(False), check),
                CommandHandler('order', check),
                MessageHandler(Filters.text('–í—ã–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑'), show_five_orders),
                MessageHandler(Filters.text('–ú–æ–∏ –∑–∞–∫–∞–∑—ã'), show_frilancer_orders),
                MessageHandler(Filters.text('–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã'), show_five_orders),
                MessageHandler(Filters.text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É'), add_orders_to_frilancer),
                MessageHandler(Filters.text('–ù–∞–∑–∞–¥'), show_five_orders),

                MessageHandler(Filters.text, start),
            ],
            States.FRILANCER_ORDERS: [
                MessageHandler(Filters.command(False), check),
                CommandHandler('order', check),
                MessageHandler(Filters.text('–ù–∞–∑–∞–¥'), show_five_orders),
                MessageHandler(Filters.text('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ'), show_frilancer_orders),
                MessageHandler(Filters.text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), start),
                MessageHandler(Filters.text, add_orders_to_frilancer),
            ],
            States.ORDERS_PAGINATOR: [
                MessageHandler(Filters.command(False), check),
                CommandHandler('order', check),
                MessageHandler(Filters.text('–ù–∞–∑–∞–¥'), start),
                MessageHandler(Filters.text('–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã'), show_five_orders),
                MessageHandler(Filters.text('–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã'), show_five_orders),
                MessageHandler(Filters.text, start),
            ],
            States.PRICE: [
                MessageHandler(Filters.text("–ù–∞–∑–∞–¥"), start),
                MessageHandler(Filters.text, chooze_rate),
            ],
            States.ORDERS: [
                MessageHandler(Filters.text("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑"), send_new_order),
                MessageHandler(Filters.text("–ú–æ–∏ –∑–∞–∫–∞–∑—ã"), show_orders),
                MessageHandler(Filters.text('–ù–∞–∑–∞–¥'), show_frilancer_orders),
                MessageHandler(Filters.text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), start),
                MessageHandler(Filters.text, finish_orders),
            ],
            States.ORDER_NAME: [
                MessageHandler(Filters.text("–ù–∞–∑–∞–¥"), send_new_order),
                MessageHandler(Filters.text, create_order_name),
            ],
            States.ORDER_DESCRIPTION: [
                MessageHandler(Filters.text("–ù–∞–∑–∞–¥"), check_client),
                MessageHandler(Filters.text, create_order_description),
            ],
            States.ORDER_FILES: [
                MessageHandler(Filters.text('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'), create_order),
                MessageHandler(Filters.text("–ù–∞–∑–∞–¥"), check_client),
                MessageHandler(Filters.document, add_file_to_order),
            ],
            States.RATE_CHOI–°E: [
                MessageHandler(Filters.text("–í—ã–±—Ä–∞—Ç—å"), send_payment),
                MessageHandler(Filters.text("–ù–∞–∑–∞–¥"), check_client),
            ],
            States.PAYMENT: [
                MessageHandler(Filters.text("–û–ø–ª–∞—Ç–∏—Ç—å"), add_user),
                MessageHandler(Filters.text("–ù–∞–∑–∞–¥"), check_client),
            ],
        },
        fallbacks=[],
        allow_reentry=True,
        name='bot_conversation',
    )

    dispatcher.add_handler(conv_handler)
    # dispatcher.add_error_handler(error)
    dispatcher.add_handler(CommandHandler("start", start))

    updater.start_polling()
    updater.idle()